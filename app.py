import streamlit as st
import random
import time
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="IA Conversacional - Chat Inteligente",
    page_icon="ü§ñ",
    layout="wide"
)

# Estilo CSS personalizado
st.markdown("""
<style>
    .main {
        background-color: #0E1117;
    }
    .stChatMessage {
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .user-message {
        background-color: #1f3a53;
        border-left: 4px solid #2ecc71;
    }
    .ai-message {
        background-color: #2c3e50;
        border-left: 4px solid #3498db;
    }
    .ai-badge {
        background-color: #3498db;
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 0.3rem;
        font-size: 0.8rem;
        margin-left: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)

# Base de conhecimento geral
KNOWLEDGE_BASE = {
    "ci√™ncia": [
        "A teoria da relatividade de Einstein revolucionou nossa compreens√£o do espa√ßo-tempo",
        "As c√©lulas s√£o a unidade b√°sica da vida, descobertas por Robert Hooke em 1665",
        "O DNA cont√©m as instru√ß√µes gen√©ticas para o desenvolvimento de todos os organismos",
        "A fotoss√≠ntese √© o processo pelo qual plantas convertem luz solar em energia"
    ],
    "tecnologia": [
        "Intelig√™ncia Artificial est√° transformando ind√∫strias em todo o mundo",
        "Blockchain oferece transpar√™ncia e seguran√ßa em transa√ß√µes digitais",
        "Computa√ß√£o qu√¢ntica promete resolver problemas imposs√≠veis para computadores cl√°ssicos",
        "Realidade virtual e aumentada est√£o mudando a forma como interagimos com o digital"
    ],
    "hist√≥ria": [
        "A Revolu√ß√£o Industrial come√ßou na Inglaterra no s√©culo XVIII",
        "A queda do Muro de Berlim em 1989 marcou o fim da Guerra Fria",
        "O Renascimento foi um per√≠odo de grande avan√ßo cultural e cient√≠fico na Europa",
        "As Grandes Navega√ß√µes expandiram o conhecimento geogr√°fico do mundo"
    ],
    "cultura": [
        "A arte expressa emo√ß√µes e ideias atrav√©s de diversas formas e t√©cnicas",
        "A literatura permite explorar diferentes realidades e perspectivas humanas",
        "A m√∫sica √© uma linguagem universal que conecta pessoas across culturas",
        "O cinema combina arte, tecnologia e narrativa para contar hist√≥rias"
    ],
    "sa√∫de": [
        "Exerc√≠cios f√≠sicos regulares melhoram a sa√∫de f√≠sica e mental",
        "Uma dieta balanceada √© essencial para o bem-estar geral",
        "O sono adequado √© crucial para a recupera√ß√£o e sa√∫de do c√©rebro",
        "Medita√ß√£o e mindfulness podem reduzir stress e ansiedade"
    ],
    "educa√ß√£o": [
        "A aprendizagem cont√≠nua √© fundamental no mundo moderno",
        "Habilidades digitais s√£o cada vez mais importantes no mercado de trabalho",
        "O pensamento cr√≠tico ajuda a analisar informa√ß√µes de forma objetiva",
        "A criatividade pode ser desenvolvida atrav√©s da pr√°tica e experimenta√ß√£o"
    ]
}

class ConversationalAI:
    def __init__(self):
        self.name = "IA Assistente"
        self.style = "respostas √∫teis e informativas"
    
    def generate_response(self, prompt):
        # Simula tempo de processamento
        time.sleep(0.3)
        
        prompt_lower = prompt.lower()
        
        # Respostas baseadas no tema
        if any(word in prompt_lower for word in ["ci√™ncia", "cient√≠fico", "pesquisa", "f√≠sica", "qu√≠mica"]):
            return random.choice(KNOWLEDGE_BASE["ci√™ncia"])
        elif any(word in prompt_lower for word in ["tech", "tecnologia", "computador", "internet", "digital"]):
            return random.choice(KNOWLEDGE_BASE["tecnologia"])
        elif any(word in prompt_lower for word in ["hist√≥ria", "passado", "antigo", "hist√≥rico"]):
            return random.choice(KNOWLEDGE_BASE["hist√≥ria"])
        elif any(word in prompt_lower for word in ["arte", "cultura", "m√∫sica", "cinema", "literatura"]):
            return random.choice(KNOWLEDGE_BASE["cultura"])
        elif any(word in prompt_lower for word in ["sa√∫de", "exerc√≠cio", "dieta", "medicina", "bem-estar"]):
            return random.choice(KNOWLEDGE_BASE["sa√∫de"])
        elif any(word in prompt_lower for word in ["educa√ß√£o", "aprender", "estudo", "escola", "universidade"]):
            return random.choice(KNOWLEDGE_BASE["educa√ß√£o"])
        else:
            return self._random_general_response(prompt)
    
    def _random_general_response(self, prompt):
        responses = [
            f"Interessante sua pergunta sobre '{prompt}'. √â um tema que envolve v√°rias perspectivas diferentes.",
            f"Sobre '{prompt}', existem diversas abordagens e opini√µes na comunidade especializada.",
            f"√ìtima quest√£o! '{prompt}' √© um t√≥pico que tem sido discutido por muitos especialistas.",
            f"Analisando '{prompt}', posso oferecer algumas informa√ß√µes gerais baseadas no conhecimento atual.",
            f"'{prompt}' √© um assunto complexo que pode ser abordado de diferentes √¢ngulos.",
            f"Vamos explorar '{prompt}' juntos. O que espec√≠fico voc√™ gostaria de saber?"
        ]
        return random.choice(responses)

# Inicializa√ß√£o da IA
if "ai" not in st.session_state:
    st.session_state.ai = ConversationalAI()

if "messages" not in st.session_state:
    st.session_state.messages = []

# Header
col1, col2 = st.columns([3, 1])
with col1:
    st.title("ü§ñ IA Conversacional - Assistente Inteligente")
    st.markdown("**Respostas √∫teis ‚Ä¢ Conhecimento geral ‚Ä¢ Assist√™ncia informativa**")
with col2:
    st.metric("Mensagens", len(st.session_state.messages))

# √Årea de chat
st.markdown("---")

for message in st.session_state.messages:
    if message["role"] == "user":
        with st.chat_message("user"):
            st.markdown(f"**üë§ Voc√™:** {message['content']}")
    else:
        with st.chat_message("assistant"):
            st.markdown(f"**ü§ñ IA:** {message['content']}")
            st.caption("üí° Informa√ß√£o √∫til ‚Ä¢ üéØ Resposta precisa")

# Input do usu√°rio
if prompt := st.chat_input("Digite sua pergunta ou mensagem..."):
    # Adiciona mensagem do usu√°rio
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(f"**üë§ Voc√™:** {prompt}")
    
    # Gera resposta da IA
    with st.chat_message("assistant"):
        with st.spinner("ü§ñ IA processando sua pergunta..."):
            response = st.session_state.ai.generate_response(prompt)
        
        st.markdown(f"**ü§ñ IA:** {response}")
        st.caption("üìö Baseado em conhecimento geral")
        
        # Adiciona √† conversa
        st.session_state.messages.append({"role": "assistant", "content": response})

# Sidebar com informa√ß√µes
with st.sidebar:
    st.header("‚öôÔ∏è Sobre a IA")
    st.info("""
    **Assistente Inteligente:**
    - Respostas baseadas em conhecimento geral
    - Informa√ß√µes sobre diversos temas
    - Linguagem natural e acess√≠vel
    - Sem vi√©s pol√≠tico ou ideol√≥gico
    """)
    
    st.markdown("---")
    st.subheader("üéØ T√≥picos Populares")
    
    topics = [
        "Como funciona a intelig√™ncia artificial?",
        "Dicas para aprender melhor",
        "Import√¢ncia do exerc√≠cio f√≠sico",
        "Hist√≥ria da internet",
        "Benef√≠cios da leitura"
    ]
    
    for topic in topics:
        if st.button(f"üí° {topic}", key=topic):
            st.session_state.messages.append({"role": "user", "content": topic})
            with st.spinner("Gerando resposta..."):
                response = st.session_state.ai.generate_response(topic)
            st.session_state.messages.append({"role": "assistant", "content": response})
            st.rerun()
    
    st.markdown("---")
    
    if st.button("üßπ Limpar Conversa", type="secondary"):
        st.session_state.messages = []
        st.rerun()
    
    st.markdown("---")
    st.caption(f"üïê √öltima atualiza√ß√£o: {datetime.now().strftime('%H:%M')}")

# Footer
st.markdown("---")
st.caption("""
üîç **IA de Conhecimento Geral** ‚Ä¢ ü§ñ **Assistente Conversacional** ‚Ä¢ üí° **Respostas Informativas**
‚Ä¢ Desenvolvido para ajudar e informar
""")
